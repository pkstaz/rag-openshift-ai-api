# =============================================================================
# RAG OpenShift AI API - Helm Values
# =============================================================================
# Optimized for OpenShift 4.18+ with enterprise security and compliance

# Image Configuration
image:
  repository: rag-openshift-ai-api
  tag: "latest"
  pullPolicy: "Always"
  pullSecrets: []
  # Example for private registry:
  # repository: quay.io/myorg/rag-openshift-ai-api
  # pullSecrets:
  #   - name: quay-registry-secret

# Deployment Configuration
replicaCount: 2
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
revisionHistoryLimit: 10

# Pod Configuration
podAnnotations: {}
podLabels: {}
  # Example:
  # podLabels:
  #   app.kubernetes.io/component: api
  #   app.kubernetes.io/part-of: rag-system

# Service Configuration
service:
  type: ClusterIP
  port: 8000
  targetPort: 8000
  annotations: {}
    # Example for monitoring:
    # annotations:
    #   prometheus.io/scrape: "true"
    #   prometheus.io/port: "8000"
    #   prometheus.io/path: "/api/v1/metrics"

# Route Configuration (OpenShift 4.18+)
route:
  enabled: true
  host: ""  # Auto-generated if empty
  path: "/"
  tls:
    enabled: true
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  annotations: {}
    # OpenShift 4.18+ specific annotations:
    # annotations:
    #   haproxy.router.openshift.io/timeout: 300s
    #   haproxy.router.openshift.io/rate-limit-connections: "true"
    #   haproxy.router.openshift.io/balance: roundrobin
    #   haproxy.router.openshift.io/disable_cookies: "true"

# Resource Management (Optimized for OpenShift 4.18+)
resources:
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    cpu: 2000m
    memory: 4Gi
  # Note: RAG workloads can be memory-intensive due to embeddings and models

# Configuration
config:
  # Elasticsearch Configuration
  elasticsearch:
    url: "https://elasticsearch:9200"
    index: "rag-documents"
    username: ""
    password: ""
    sslVerify: true
    timeout: 30
    maxRetries: 3
    # Connection pool settings
    maxConnections: 20
    retryOnTimeout: true
  
  # vLLM Configuration
  vllm:
    endpoint: "http://vllm-service:8000"
    defaultModel: "RedHatAI/granite-3.1-8b-instruct"
    maxTokens: 2048
    temperature: 0.7
    topP: 0.9
    timeout: 60
  
  # API Configuration
  api:
    logLevel: "INFO"
    debug: false
    corsOrigins: ["*"]
    maxRequestSize: "10MB"
    requestTimeout: 300
    # Rate limiting
    rateLimit:
      enabled: true
      requestsPerMinute: 60
      burstSize: 10
  
  # RAG Pipeline Configuration
  rag:
    # Retrieval settings
    retrieval:
      topK: 5
      similarityThreshold: 0.7
      maxTokens: 4000
      searchType: "hybrid"  # vector, keyword, hybrid
    
    # Generation settings
    generation:
      maxTokens: 2048
      temperature: 0.7
      topP: 0.9
      topK: 50
      repetitionPenalty: 1.1
    
    # Caching
    cache:
      enabled: true
      ttl: 3600  # 1 hour
      maxSize: 1000

# Health Checks (Optimized for OpenShift 4.18+)
livenessProbe:
  httpGet:
    path: /health
    port: 8000
    httpHeaders:
      - name: User-Agent
        value: "OpenShift-Health-Check"
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /ready
    port: 8000
    httpHeaders:
      - name: User-Agent
        value: "OpenShift-Health-Check"
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  httpGet:
    path: /health
    port: 8000
    httpHeaders:
      - name: User-Agent
        value: "OpenShift-Health-Check"
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Security Context (OpenShift 4.18+ Compliant)
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault
  # OpenShift 4.18+ specific security settings
  fsGroupChangePolicy: OnRootMismatch

# Service Account (OpenShift 4.18+ Optimized)
serviceAccount:
  create: true
  name: ""
  annotations: {}
  # OpenShift 4.18+ specific annotations:
  # annotations:
  #   serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"rag-openshift-ai-api"}}'
  #   serviceaccounts.openshift.io/oauth-redirecturi.1: "https://rag-api-rag-demo.apps.your-cluster.com/oauth/callback"

# Network Policy (OpenShift 4.18+ Enhanced)
networkPolicy:
  enabled: true
  ingressRules:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app: ingress-nginx
  egressRules:
    - to:
        - namespaceSelector:
            matchLabels:
              name: elasticsearch-namespace
      ports:
        - protocol: TCP
          port: 9200
    - to:
        - namespaceSelector:
            matchLabels:
              name: vllm-namespace
      ports:
        - protocol: TCP
          port: 8000
    - to: []  # Allow DNS resolution
      ports:
        - protocol: UDP
          port: 53

# Pod Disruption Budget (OpenShift 4.18+)
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # Alternative: maxUnavailable: 1

# Horizontal Pod Autoscaler (OpenShift 4.18+)
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  # OpenShift 4.18+ specific metrics
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

# Service Monitor (OpenShift 4.18+ Monitoring)
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  path: /api/v1/metrics
  port: http
  # OpenShift 4.18+ specific labels
  additionalLabels:
    release: prometheus

# ConfigMaps and Secrets
configMaps:
  appConfig:
    enabled: true
    data:
      api_config.yaml: |
        api:
          host: 0.0.0.0
          port: 8000
          debug: false
          log_level: INFO
        elasticsearch:
          url: https://elasticsearch:9200
          index: rag-documents
        vllm:
          url: http://vllm-service:8000
          model: meta-llama/Llama-2-7b-chat-hf

secrets:
  elasticsearch:
    enabled: true
    secretName: elasticsearch-credentials
    data:
      username: elastic
      password: ""
  vllm:
    enabled: false
    secretName: vllm-credentials
    data:
      api_key: ""

# Affinity and Anti-Affinity (OpenShift 4.18+)
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - rag-openshift-ai-api
        topologyKey: kubernetes.io/hostname

# Node Selector (OpenShift 4.18+)
nodeSelector: {}
  # Example for specific node pools:
  # nodeSelector:
  #   node-role.kubernetes.io/worker: ""
  #   node-type: ai-workload

# Tolerations (OpenShift 4.18+)
tolerations: []
  # Example for dedicated nodes:
  # tolerations:
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "ai-workload"
  #   effect: "NoSchedule"

# Priority Class (OpenShift 4.18+)
priorityClassName: ""

# Termination Grace Period (OpenShift 4.18+)
terminationGracePeriodSeconds: 30

# Lifecycle Hooks (OpenShift 4.18+)
lifecycle:
  preStop:
    exec:
      command:
      - /bin/sh
      - -c
      - "sleep 10"

# Volume Mounts (OpenShift 4.18+)
volumeMounts:
  - name: app-config
    mountPath: /app/config
    readOnly: true
  - name: tmp-volume
    mountPath: /app/tmp
  - name: cache-volume
    mountPath: /app/cache

# Volumes (OpenShift 4.18+)
volumes:
  - name: app-config
    configMap:
      name: rag-openshift-ai-api-config
  - name: tmp-volume
    emptyDir: {}
  - name: cache-volume
    emptyDir: {}

# Init Containers (OpenShift 4.18+)
initContainers: []
  # Example for dependency checks:
  # initContainers:
  # - name: elasticsearch-check
  #   image: busybox:1.35
  #   command: ['sh', '-c', 'until nc -z elasticsearch 9200; do echo waiting for elasticsearch; sleep 2; done;']
  # - name: vllm-check
  #   image: busybox:1.35
  #   command: ['sh', '-c', 'until nc -z vllm-service 8000; do echo waiting for vllm; sleep 2; done;']

# Sidecar Containers (OpenShift 4.18+)
sidecars: []
  # Example for logging sidecar:
  # sidecars:
  # - name: log-aggregator
  #   image: fluentd:v1.16-1
  #   volumeMounts:
  #   - name: varlog
  #     mountPath: /var/log
  #   - name: varlibdockercontainers
  #     mountPath: /var/lib/docker/containers
  #     readOnly: true

# Pod Annotations (OpenShift 4.18+)
podAnnotations: {}
  # Example:
  # podAnnotations:
  #   checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
  #   prometheus.io/scrape: "true"
  #   prometheus.io/port: "8000"

# Deployment Annotations (OpenShift 4.18+)
deploymentAnnotations: {}
  # Example:
  # deploymentAnnotations:
  #   openshift.io/display-name: "RAG AI API"
  #   openshift.io/description: "Retrieval-Augmented Generation API for OpenShift"

# Ingress Configuration (Alternative to Route)
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: rag-api.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# RBAC Configuration (OpenShift 4.18+)
rbac:
  enabled: true
  rules: []
    # Example rules:
    # rules:
    # - apiGroups: [""]
    #   resources: ["pods"]
    #   verbs: ["get", "list", "watch"]
    # - apiGroups: [""]
    #   resources: ["services"]
    #   verbs: ["get", "list", "watch"]

# Cluster Role Binding (OpenShift 4.18+)
clusterRoleBinding:
  enabled: false
  clusterRole: ""
  subjects: []

# Pod Security Standards (OpenShift 4.18+)
podSecurityStandards:
  enabled: true
  level: "restricted"
  version: "v1.24"
  audit: "restricted"
  warn: "restricted"
  enforce: "restricted"

# OpenShift Specific Settings
openshift:
  # SCC (Security Context Constraints)
  scc:
    enabled: true
    name: "rag-api-scc"
    priority: 10
    runAsUser:
      type: MustRunAs
      uid: 1001
    runAsGroup:
      type: MustRunAs
      ranges:
        - min: 1001
          max: 1001
    fsGroup:
      type: MustRunAs
      ranges:
        - min: 1001
          max: 1001
    seLinuxContext:
      type: MustRunAs
      user: ""
      role: ""
      type: ""
      level: ""
    supplementalGroups:
      type: RunAsAny
    volumes:
      - "configMap"
      - "downwardAPI"
      - "emptyDir"
      - "persistentVolumeClaim"
      - "projected"
      - "secret"
    allowPrivilegedContainer: false
    allowHostDirVolumePlugin: false
    allowHostNetwork: false
    allowHostPorts: false
    allowHostPID: false
    allowHostIPC: false
    readOnlyRootFilesystem: true
    requiredDropCapabilities:
      - "ALL"
    defaultAddCapabilities: []
    allowedCapabilities: []
    allowedUnsafeSysctls: []
    forbiddenSysctls: []
    seccompProfiles:
      - "RuntimeDefault"

  # Build Configuration
  build:
    enabled: false
    strategy: "Docker"
    source:
      git:
        uri: ""
        ref: "main"
      contextDir: "."
    output:
      to:
        kind: "ImageStreamTag"
        name: "rag-openshift-ai-api:latest"
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"

  # Image Stream
  imageStream:
    enabled: false
    name: "rag-openshift-ai-api"
    tags:
      - name: "latest"
        from:
          kind: "DockerImage"
          name: "rag-openshift-ai-api:latest"
        importPolicy:
          scheduled: true
        referencePolicy:
          type: "Local"

# Monitoring and Observability (OpenShift 4.18+)
monitoring:
  # Prometheus Service Monitor
  serviceMonitor:
    enabled: true
    interval: "30s"
    scrapeTimeout: "10s"
    path: "/api/v1/metrics"
    port: "http"
    honorLabels: true
    relabelings: []
    metricRelabelings: []

  # Grafana Dashboard
  grafanaDashboard:
    enabled: false
    name: "rag-api-dashboard"
    namespace: "openshift-monitoring"
    dashboard: |
      {
        "dashboard": {
          "title": "RAG API Dashboard",
          "panels": []
        }
      }

  # Alerting Rules
  prometheusRule:
    enabled: false
    name: "rag-api-alerts"
    rules: []
      # Example rules:
      # rules:
      # - alert: RAGAPIHighErrorRate
      #   expr: rate(rag_api_errors_total[5m]) > 0.1
      #   for: 2m
      #   labels:
      #     severity: warning
      #   annotations:
      #     summary: "High error rate in RAG API"
      #     description: "RAG API is experiencing high error rate"

# Backup and Recovery (OpenShift 4.18+)
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "7d"
  storage:
    type: "s3"
    bucket: "rag-api-backups"
    region: "us-east-1"

# Compliance and Security (OpenShift 4.18+)
compliance:
  # Pod Security Standards
  podSecurityStandards:
    enabled: true
    level: "restricted"
    version: "v1.24"

  # Security Context Constraints
  scc:
    enabled: true
    name: "rag-api-scc"

  # Network Policies
  networkPolicies:
    enabled: true
    ingressRules: []
    egressRules: []

  # Resource Quotas
  resourceQuotas:
    enabled: false
    hard:
      requests.cpu: "4"
      requests.memory: "8Gi"
      limits.cpu: "8"
      limits.memory: "16Gi"

  # Limit Ranges
  limitRanges:
    enabled: false
    limits:
      - type: "Container"
        default:
          cpu: "500m"
          memory: "1Gi"
        defaultRequest:
          cpu: "250m"
          memory: "512Mi"
        max:
          cpu: "2000m"
          memory: "4Gi"
        min:
          cpu: "100m"
          memory: "128Mi"

# Environment Variables
env:
  # API Configuration
  - name: API_LOG_LEVEL
    value: "{{ .Values.config.api.logLevel }}"
  - name: API_DEBUG
    value: "{{ .Values.config.api.debug }}"
  - name: API_CORS_ORIGINS
    value: "{{ .Values.config.api.corsOrigins | join \",\" }}"
  - name: API_MAX_REQUEST_SIZE
    value: "{{ .Values.config.api.maxRequestSize }}"
  - name: API_REQUEST_TIMEOUT
    value: "{{ .Values.config.api.requestTimeout }}"
  
  # Elasticsearch Configuration
  - name: ELASTICSEARCH_URL
    value: "{{ .Values.config.elasticsearch.url }}"
  - name: ELASTICSEARCH_INDEX
    value: "{{ .Values.config.elasticsearch.index }}"
  - name: ELASTICSEARCH_USERNAME
    value: "{{ .Values.config.elasticsearch.username }}"
  - name: ELASTICSEARCH_PASSWORD
    value: "{{ .Values.config.elasticsearch.password }}"
  - name: ELASTICSEARCH_SSL_VERIFY
    value: "{{ .Values.config.elasticsearch.sslVerify }}"
  - name: ELASTICSEARCH_TIMEOUT
    value: "{{ .Values.config.elasticsearch.timeout }}"
  - name: ELASTICSEARCH_MAX_RETRIES
    value: "{{ .Values.config.elasticsearch.maxRetries }}"
  
  # vLLM Configuration
  - name: VLLM_ENDPOINT
    value: "{{ .Values.config.vllm.endpoint }}"
  - name: VLLM_DEFAULT_MODEL
    value: "{{ .Values.config.vllm.defaultModel }}"
  - name: VLLM_MAX_TOKENS
    value: "{{ .Values.config.vllm.maxTokens }}"
  - name: VLLM_TEMPERATURE
    value: "{{ .Values.config.vllm.temperature }}"
  - name: VLLM_TOP_P
    value: "{{ .Values.config.vllm.topP }}"
  - name: VLLM_TIMEOUT
    value: "{{ .Values.config.vllm.timeout }}"
  
  # RAG Configuration
  - name: RAG_TOP_K
    value: "{{ .Values.config.rag.retrieval.topK }}"
  - name: RAG_SIMILARITY_THRESHOLD
    value: "{{ .Values.config.rag.retrieval.similarityThreshold }}"
  - name: RAG_MAX_TOKENS
    value: "{{ .Values.config.rag.retrieval.maxTokens }}"
  - name: RAG_SEARCH_TYPE
    value: "{{ .Values.config.rag.retrieval.searchType }}"
  - name: RAG_GENERATION_MAX_TOKENS
    value: "{{ .Values.config.rag.generation.maxTokens }}"
  - name: RAG_GENERATION_TEMPERATURE
    value: "{{ .Values.config.rag.generation.temperature }}"
  - name: RAG_GENERATION_TOP_P
    value: "{{ .Values.config.rag.generation.topP }}"
  - name: RAG_GENERATION_TOP_K
    value: "{{ .Values.config.rag.generation.topK }}"
  - name: RAG_GENERATION_REPETITION_PENALTY
    value: "{{ .Values.config.rag.generation.repetitionPenalty }}"
  - name: RAG_CACHE_ENABLED
    value: "{{ .Values.config.rag.cache.enabled }}"
  - name: RAG_CACHE_TTL
    value: "{{ .Values.config.rag.cache.ttl }}"
  - name: RAG_CACHE_MAX_SIZE
    value: "{{ .Values.config.rag.cache.maxSize }}"

# Logging Configuration
logging:
  level: "INFO"
  format: "json"
  output: "stdout"
  # Fluentd configuration
  fluentd:
    enabled: false
    # config: |
    #   <source>
    #     @type tail
    #     path /var/log/containers/*.log
    #     pos_file /var/log/fluentd-containers.log.pos
    #     tag kubernetes.*
    #     read_from_head true
    #     <parse>
    #       @type json
    #       time_format %Y-%m-%dT%H:%M:%S.%NZ
    #     </parse>
    #   </source>

# Pod Template Annotations
podTemplateAnnotations: {}
# Example:
# podTemplateAnnotations:
#   checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}

# Pod Template Labels
podTemplateLabels: {}
# Example:
# podTemplateLabels:
#   app.kubernetes.io/component: api 